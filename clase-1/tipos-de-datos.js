// Tipos de datos primitivos

// ðŸ”¹ number ðŸ”¹
let numero = 4324;
// Subtipos de nÃºmeros
// â—½ interger
let entero = 24;
// â—½ float
let flotante = 24.023;
// â—½ Not a Number | No es un nÃºmero
let noEsUnNro = NaN;
// â—½ infinity
let infinito = Infinity

// ðŸ”¹ BigInt ðŸ”¹
// tienen una n al final
let enterosGrandes = 8479465465456484786456n

// ðŸ”¹ string ðŸ”¹
// â—½ comillas dobles
let string = "asdasd A";
// â—½ comillas simples
let string2 = '123123';
// â—½ backtick Alt+96
let string23 = `zaraza123`;

// ðŸ”¹ boolean ðŸ”¹
// booleanos
let booleano = true; //verdadero
let booleano2 = false; //falso

// ðŸ”¹ undefined ðŸ”¹
let noLoDefino; //undefined
let noDefinido = undefined;

// ðŸ”¹ object ðŸ”¹
// null es el Ãºnico objeto primitivo
let nulo = null;

// ðŸ”¹ symbol ðŸ”¹
// Son nuevos y de muy pocos usos
let simbolo = Symbol("Soy un symbolo");


// typeof
// la palabra reservada typeof nos permite ver el tipo de dato con el que estamos trabajando
const a = "hola"
typeof a // 'string'

console.log("Ejemplo de porque calcular con flotantes puede causar errores:", "1.2-1=", 1.2-1)

// ðŸ”¶ Funciones de JS que usamos ðŸ”¶
/* 
// Entrada de Usuario
ðŸ”¹ prompt("string") => Abre una ventana que muestra el string y permite al usuario escribir, devuelve lo escrito por el usuario como string.
ðŸ”¹ confirm("string") => Abre una ventana que muestra el string y permite al usuario escribir, devuelve lo escrito por el usuario como booleano.
// Salida de usuario
ðŸ”¹ alert("string") => Abre una ventana que muestra el string
ðŸ”¹ console.log(x) => imprime en consola x, dicho x puede ser variable, funciÃ³n u objeto

// Conversoras
ðŸ”¹ Number(x) => trata de convertir x en un nÃºmero
ðŸ”¹ parseInt(x) => trata de convertir a x en un nÃºmero entero
ðŸ”¹ parseFloat(x) => trata de convertir a x en un nÃºmero flotante
ðŸ”¹ String(x) => convierte a x en string
ðŸ”¹ variable.toString() => convierte la variable en string
ðŸ”¹ Boolean(x) => convierte a x en un booleano
// Ver tipo de dato
ðŸ”¹ typeof variable => dice el tipo de variable 
*/